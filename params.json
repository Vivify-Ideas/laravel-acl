{"name":"Laravel ACL","tagline":"ACL component for Laravel 4","body":"Laravel ACL\r\n===========\r\n\r\nACL component for Laravel 4.\r\n\r\n- [Installation](#installation)\r\n- [Configuration](#configuration)\r\n  - [Provider](#provider)\r\n  - [Super users](#superusers)\r\n  - [Guest user](#guestuser)\r\n  - [Permissions](#permissions)\r\n  - [Groups](#groups)\r\n- [Usage](#usage)\r\n\r\n## Installation\r\n\r\nFirst you need to install this package through Composer. Edit your project's `composer.json` file to require `vivify-ideas/acl`.\r\n\r\n```\r\n  \"require\": {\r\n    \"vivify-ideas/acl\": \"dev-master\"\r\n  },\r\n  \"minimum-stability\" : \"dev\"\r\n```\r\n\r\nNext, update Composer from the Terminal:\r\n\r\n```\r\n  composer update\r\n```\r\n\r\nOnce this operation completes, you will need to add the service provider into your app. Open `app/config/app.php`, and add a new item to the providers array.\r\n\r\n```\r\n  'VivifyIdeas\\Acl\\AclServiceProvider\r\n```\r\n\r\nAnd also add new alias into aliases array.\r\n\r\n```\r\n  'Acl' => 'VivifyIdeas\\Acl\\Facades\\Acl',\r\n```\r\n\r\nLast step is to create main structure for keeping ACL. You can easy done this by running `artisan` command:\r\n\r\n```\r\nphp artisan acl:install\r\n```\r\n\r\nThis will use current permission provider (`Eloquent`) and create DB structure for saving permissions. It will create 2 additional tables `acl_permissions` and `acl_user_permissions`.\r\n\r\nThat's it! You're all set to go.\r\n\r\n## Configuration\r\n\r\nAfter runing `artisan acl:install` command, you will get a new config file in `app/config/packages/vivify-ideas/acl/config.php`.\r\n\r\nThere you will notice 5 sections.\r\n\r\n### Provider\r\n\r\n```php\r\n'provider' => 'eloquent'\r\n```\r\n\r\nMain feature of this ACL component is `PermissionsProvider`. Permission provider represent class that handle permissions. Currently there is only one permission provider `Eloquent` (you can assume that permissions will be stored in DB that you specified on your project).\r\n\r\n### SuperUsers\r\n\r\n```php\r\n'superusers' => array()\r\n```\r\n\r\nHere you can define user IDs that will have superuser rights. This users will be able allowed all permissions.\r\n\r\n### GuestUser\r\n\r\n```php\r\n'guestuser' => 0\r\n```\r\n\r\nPut here ID that will used for setting permissions to guest users.\r\n\r\n### Permissions\r\n\r\n```php\r\n'permissions' => array()\r\n```\r\n\r\nHere you need to put all permissions that exist in your system. Permissions need to be in next format\r\n\r\n```php\r\narray(\r\n  array(\r\n    'id' => 'PERMISSION_ID',\r\n    'allowed' => true|false,\r\n    'route' => array('GET:/resource/(\\d+)/edit', 'PUT:/resource/(\\d+)'),\r\n    'resource_id_required' => true|false,\r\n    'name' => 'Permission name',\r\n    'group_id' => 'GROUP_ID_1', // optional\r\n  ), array(\r\n    'id' => 'PERMISSION_ID_2',\r\n    'allowed' => true|false,\r\n    'route' => 'GET:/resource/(\\d+)',\r\n    'resource_id_required' => true|false,\r\n    'name' => 'Permission 2 name'\r\n    'group_id' => 'GROUP_ID_2', // optional\r\n  )\r\n )\r\n```\r\n\r\n### Groups\r\n\r\n```php\r\n'groups' => array()\r\n```\r\n\r\nEvery permission can belong to some group. You can have groups that belongs to other group. Every group can have a route. Use next format:\r\n\r\n```php\r\narray(\r\n  array(\r\n    'id' => 'ADMIN_PRIVILEGES',\r\n    'name' => 'Administrator Privileges',\r\n    'route' => 'GET:/admin/(\\d+)',\r\n\r\n    'children' => array(\r\n      array(\r\n        'id' => 'MANAGE_STUFF',\r\n        'name' => 'Manage Stuff',\r\n        'route' => 'GET:/resource/(\\d+)'\r\n      ),\r\n      array(\r\n        'id' => 'MANAGE_PRODUCTS',\r\n        'name' => 'Manage Products',\r\n        'route' => 'GET:/resource/(\\d+)'\r\n      ),\r\n      array(\r\n        'id' => 'MANAGE_USERS',\r\n        'name' => 'Manage Users',\r\n        'route' => 'GET:/resource/(\\d+)',\r\n\r\n        'children' => array(\r\n          array(\r\n            'id' => 'MANAGE_SPEC_USER',\r\n            'name' => 'Manage spec user',\r\n            'route' => 'GET:/resource/(\\d+)'\r\n          )\r\n        )\r\n      )\r\n    )\r\n  ),\r\n  array(\r\n    'id' => 'STUFF_PRIVILEGES',\r\n    'name' => 'Stuff Privileges',\r\n  )\r\n)\r\n```\r\n\r\n## Usage\r\n\r\nWhen you are satisfy how your configuration file look like, run next artisan command:\r\n\r\n```\r\nphp artisan acl:update\r\n```\r\n\r\nThis command you need to run every time when you update config file with new permissions.\r\n\r\nIf you want to delete all permissions (including user permissions), and again reload permissions from config file you can use this command:\r\n\r\n```\r\nphp artisan acl:reset\r\n```\r\n\r\n### Available Artisan commands\r\n\r\nHere is the list of all artisan commands:\r\n\r\n- ```acl:install``` Create basic ACL table structure.\r\n- ```acl:install clean``` Delete all acl tables, reset config file to default version and again create basic ACL table structure.\r\n- ```acl:update``` Update all ACL permissions from config file.\r\n- ```acl:reset``` Reset all ACL permissions. This will delete both user and system permissions and install permissions from config file\r\n\r\n### Checking permissions\r\n\r\nHere are few ways how to check user permissions:\r\n\r\n```php\r\n// Whether a user with ID 2 can see a list of all products\r\nAcl::user(2)->permission('LIST_PRODUCTS')->check();\r\n\r\n// Whether a user with ID 1 can edit product with ID 2\r\nAcl::user(1)->permission('EDIT_PRODUCT', 2)->check();\r\n\r\n// Can currently authenticated user edit product with ID 2\r\nAcl::permission('EDIT_PRODUCT', 2)->check();\r\n\r\n// Whether a user with ID 1 can edit and delete product with ID 2\r\nAcl::user(1)->permission('EDIT_PRODUCT', 2)\r\n            ->permission('DELETE_PRODUCT', 2)\r\n            ->check();\r\n\r\n// Can user with ID 1 access /products URL\r\nAcl::user(1)->checkRoute('GET', '/products')\r\n\r\n// Can currently authenticated user access /products URL\r\nAcl::checkRoute('GET', '/products');\r\n\r\n// Get me array of product IDs that user with ID 1 can edit\r\nAcl::user(1)->permission('EDIT_PRODUCT')->getResourceIds();\r\n\r\n// Get me array of product IDs that user with ID 1 can not edit\r\nAcl::user(1)->permission('EDIT_PRODUCT')->getResourceIds(false);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}