{"name":"Laravel ACL","tagline":"ACL component for Laravel 4","body":"Laravel ACL\r\n===========\r\n\r\nACL component for Laravel 4.\r\n\r\n## Installation\r\n\r\nFirst you need to install this package through Composer. Edit your project's `composer.json` file to require `vivify-ideas/acl`.\r\n\r\n```\r\n  \"require\": {\r\n    \"vivify-ideas/acl\": \"dev-master\"\r\n  },\r\n  \"minimum-stability\" : \"dev\"\r\n```\r\n\r\nNext, update Composer from the Terminal:\r\n\r\n```\r\n  composer update\r\n```\r\n\r\nOnce this operation completes, you will need to add the service provider into your app. Open `app/config/app.php`, and add a new item to the providers array.\r\n\r\n```\r\n  'VivifyIdeas\\Acl\\AclServiceProvider\r\n```\r\n\r\nAnd also add two new aliases into aliases array.\r\n\r\n```\r\n  'Acl'        => 'VivifyIdeas\\Acl\\Facades\\Checker',\r\n  'AclManager' => 'VivifyIdeas\\Acl\\Facades\\Manager',\r\n```\r\n\r\nLast step is to create main structure for keeping ACL. You can easy done this by running `artisan` command:\r\n\r\n```\r\nphp artisan acl:install\r\n```\r\n\r\nThis will use current permission provider (`Eloquent`) and create DB structure for saving permissions. It will create 2 additional tables `acl_permissions` and `acl_user_permissions`.\r\n\r\nThat's it! You're all set to go.\r\n\r\n## Usage\r\n\r\nMain feature of this ACL component is `PermissionsProvider`. Permission provider represent class that handle permissions. Currently there is only one permission provider `Eloquent` (you can assume that permissions will be stored in DB that you specified on your project).\r\n\r\nFirst step is to fill available permission for your application. You can do this by overwriting ACL default config file (`app/config/packages/vivify-ideas/acl/config.php`).\r\n\r\nIn the config file there is `permissions` section that you need to put all permissions that exist in your system in `permissions` section.\r\n\r\nWhen you are satisfy how your permissions look like, run next artisan command:\r\n\r\n```\r\nphp artisan acl:update\r\n```\r\n\r\nThis command you need to run every time when you update config file with new permissions.\r\n\r\nIf you want to delete all permissions (including user permissions), and again reload permissions from config file you can use this command:\r\n\r\n```\r\nphp artisan acl:reset\r\n```\r\n\r\n### Checking permissions\r\n\r\nHere are few ways how to check user permissions:\r\n\r\n```php\r\n// Whether a user with ID 2 can see a list of all products\r\nAcl::user(2)->permission('LIST_PRODUCTS')->check();\r\n\r\n// Whether a user with ID 1 can edit product with ID 2\r\nAcl::user(1)->permission('EDIT_PRODUCT', 2)->check();\r\n\r\n// Can currently authenticated user edit product with ID 2\r\nAcl::permission('EDIT_PRODUCT', 2)->check();\r\n\r\n// Whether a user with ID 1 can edit and delete product with ID 2\r\nAcl::user(1)->permission('EDIT_PRODUCT', 2)\r\n            ->permission('DELETE_PRODUCT', 2)\r\n            ->check();\r\n\r\n// Can user with ID 1 access /products URL\r\nAcl::user(1)->checkRoute('GET', '/products')\r\n\r\n// Can currently authenticated user access /products URL\r\nAcl::checkRoute('GET', '/products');\r\n\r\n// Get me array of product IDs that user with ID 1 can edit\r\nAcl::user(1)->permission('EDIT_PRODUCT')->getResourceIds();\r\n\r\n// Get me array of product IDs that user with ID 1 can not edit\r\nAcl::user(1)->permission('EDIT_PRODUCT')->getResourceIds(false);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}